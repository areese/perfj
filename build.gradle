
// Establish version and status
ext {
  githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name
}

buildscript {
  repositories {
    mavenLocal()
    mavenCentral() // maven { url 'http://jcenter.bintray.com' }
  }
  apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}


apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
// apply from: file('gradle/check.gradle')
// apply from: file('gradle/license.gradle')
// apply from: file('gradle/release.gradle')


apply plugin: 'c'

model {
  platforms {
    x86 {
      architecture "x86"
    }
    x64 {
      architecture "x86_64"
    }
  }

  components {
    perfj(NativeLibrarySpec) {
      // targetPlatform "x86"
      // targetPlatform "x64"
      binaries.withType(SharedLibraryBinarySpec) {
        if (targetPlatform.operatingSystem.linux) {
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"

          sharedLibraryFile file("${buildDir}/classes/main/info/minzhou/perfj/native/libperfj.so")
        }
        if (targetPlatform.operatingSystem.macOsX) {
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"

          sharedLibraryFile file("${buildDir}/classes/main/info/minzhou/perfj/native/libperfj.dylib")
        }
      }

      binaries.withType(StaticLibraryBinarySpec) {
        buildable false
      }
    }
  }
}

jar.dependsOn 'perfjSharedLibrary'

dependencies {
  provided files("${org.gradle.internal.jvm.Jvm.current().javaHome}/lib/tools.jar")
}

